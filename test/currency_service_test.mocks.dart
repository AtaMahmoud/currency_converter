// Mocks generated by Mockito 5.0.15 from annotations
// in currency_converter/test/currency_service_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:currency_converter/src/business_logic/models/rate.dart' as _i2;
import 'package:currency_converter/src/services/storage/storage_service.dart'
    as _i3;
import 'package:currency_converter/src/services/web_api/web_api.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

// ignore: camel_case_types
class _FakeRate_0 extends _i1.Fake implements _i2.Rate {}

/// A class which mocks [StorageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockStorageService extends _i1.Mock implements _i3.StorageService {
  MockStorageService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> saveExchangeRate(_i2.Rate? rate) =>
      (super.noSuchMethod(Invocation.method(#saveExchangeRate, [rate]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<_i2.Rate?> getExchangeRate() =>
      (super.noSuchMethod(Invocation.method(#getExchangeRate, []),
          returnValue: Future<_i2.Rate?>.value()) as _i4.Future<_i2.Rate?>);
  @override
  // ignore: unnecessary_overrides
  String toString() => super.toString();
}

/// A class which mocks [WebApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockWebApi extends _i1.Mock implements _i5.WebApi {
  MockWebApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Rate> fetchExchangeRate() =>
      (super.noSuchMethod(Invocation.method(#fetchExchangeRate, []),
              returnValue: Future<_i2.Rate>.value(_FakeRate_0()))
          as _i4.Future<_i2.Rate>);
  @override
  // ignore: unnecessary_overrides
  String toString() => super.toString();
}
